'use strict';

const _ = require('lodash');
const fs = require('fs');
const request = require('request').defaults({jar: true});
const cheerio = require('cheerio');

// Require custom library functions
const util = require('./lib/util');
const Url = require('./lib/url');

// By default cookies are disabled in the request package. 
// Turn it to true in the above declaration and initialize a cookie jar
const cookieJar = request.jar();

// Search for a fighter
function searchFighter(fighterName, eventName, cb) {
  
  // Check if optional eventName field is set
  let callback = cb || eventName;
  
  // Parse the fighter's name of spaces and special characters
  let fighter = util.parseName(fighterName);
  
  // Create new URL object
  let options = new Url('https://www.bestfightodds.com/search?query=', fighter, cookieJar);
 
  // Make request to website and traverse down the DOM to find all the results
  request(options, function(err, res, body) {
    if (err) {
      return console.error('Error on request: ' + err);
    } 
    
    if (res.statusCode != 200) {
      return console.error('Reponse error: ' + res.statusCode);
    }
    
    if (res.statusCode == 200 && res.request.uri.path.match(/.search.query.*/)) {
      
      // Load the HTML into Cheerio
      let $ = cheerio.load(body);
      let searchResults = [];

      // Traverse down the DOM to find the search results and put it in array
      $('table[class=content-list] td').not('.content-list-date').each(function(i, element) {
        let fighter = {};
        fighter.name = $(this).text();
        fighter.url = $(this).find('a').attr('href');

        searchResults.push(fighter);
      });

      matchName(searchResults, fighterName, callback);
      
    } else {
      loadFighterPage(res.request.uri.path, callback);
    }

  });
}

// Match fighter name
function matchName(results, fighterName, callback) {
  let nameMatches = [];
  
  // Compare each item in the array to find 
  for (let i = 0; i < results.length; i++) {
    let rgxp = new RegExp(fighterName.toLowerCase(), "g");
    if (results[i].name.toLowerCase().match(rgxp)) {
      nameMatches.push(results[i]);
    }
  }
  
  // Check to see if there are errors such as no matches or multiple matches
  switch (nameMatches.length) {
    case 1:
      loadFighterPage(nameMatches[0], callback);
      break;
    case 0:
      callback('Error: no matches found!');
      break;
    default:
      callback('Error: multiple matches found!');
  }
    
}

// Load fighter page and grab stats
function loadFighterPage(fighter, callback) {
  let options = new Url(typeof fighter === 'object' ? fighter.url : fighter, cookieJar);
  
  request(options, function(err, res, body) {
    if (err) {
      return console.error('Error on request: ' + err);
    }
    
    if (res.statusCode == 200) {
      
      // Load the HTML into Cheerio
      let $ = cheerio.load(body);
      let searchResults = [];

      // This is using Cheerio traversing down the DOM to find shit
      $('.team-stats-table tr').not('.item-mobile-only-row').each(function(i, element) {
        let fighter = {};
        let event = {};
        
        fighter.id = i.toString();
        fighter.fighterName = $(this).find('th[class=oppcell]').text().replace(/\n|\r/g, "").trim();
        fighter.fighterUrl = $(this).attr('class', 'oppcell').find('a').attr('href');
        fighter.openOdds = $(this).find('span[id^=oID]').eq(0).text();
        fighter.closeOdds = $(this).find('span[id^=oID]').eq(1).text();
        fighter.bestWorseOdds = $(this).find('span[id^=oID]').eq(2).text();
        
        event.fighter = fighter;
        
        event.eventName = $(this).find('td[class=item-non-mobile]').not(function(i, element) {
          return $(this).attr('scope') !== 'row';
        }).text().replace(/\n|\r/g, "").trim();
        event.eventUrl = $(this).find('td[class=item-non-mobile]').not(function(i, element) {
          return $(this).attr('scope') !== 'row';
        }).find('a').attr('href');
        event.eventDate = $(this).find('td[class=item-non-mobile]').not(function(i, element) {
          return $(this).attr('scope') === 'row';
        }).text();
        
        if (fighter.id !== '0') searchResults.push(event);
      });   
      
      // Send the callback through with the results and no error
      callback(null, mergeFighterResults(searchResults));
      
    } else {
      return console.error('Reponse error: ' + res.statusCode);
    }
  });
}

// Merge fighter object and clean it up
function mergeFighterResults(results) {
  
  let cleanResults = [];
  let fighters = {};
  let fighterId = [];
  let counter = 1;
  
  for (let i = 0; i < results.length; i++) {
    
    if (util.oddEven(parseInt(results[i].fighter.id)) === 1) {
      fighters.fighterOne = results[i].fighter;
      fighterId.push(results[i].fighter.fighterUrl.replace(/^\D*/, ''));
      fighters.eventName = results[i].eventName;
      fighters.eventUrl = results[i].eventUrl;
      counter++;
    } else {
      fighters.fighterTwo = results[i].fighter;
      fighterId.push(results[i].fighter.fighterUrl.replace(/^\D*/, ''));
      fighters.fightId = util.combineFighterId(fighterId);
      fighters.eventDate = util.parseDate(results[i].eventDate);
      counter++;
    }
    
    switch (counter) {
      case 3:
        cleanResults.push(fighters);
        fighters = {};
        fighterId = [];
        counter = 1;
        break;
    }
  }
  
  return cleanResults;
}

module.exports = searchFighter;

/*
  What could go wrong and what else do I need to do?
  - Be careful passing the cookie jar object into the constructor, although it's by reference it may not come out correct
  - Is line 84's cookieJar still the same?
  - Add event part to search fighter later
  - If there are any Cheerio errors, pass it along to the callback
  - Add fighters that skip the search page like al iaquinta
*/

